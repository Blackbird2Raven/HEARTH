name: Issue Labeler
on:
  issues:
    types: [opened]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to label'
        required: true
        type: number

jobs:
  label-new-issues:
    runs-on: ubuntu-latest
    if: github.repository == 'THOR-Collective/HEARTH'
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
             console.log('Event:', context.eventName);
             console.log('Action:', context.payload.action);
             console.log('Repository:', context.repo.owner + '/' + context.repo.name);
             console.log('Full payload:', JSON.stringify(context.payload, null, 2));
             
             try {
               console.log('Fetching issue data...');
               const issueData = await github.rest.issues.get({
                 owner: 'THOR-Collective',
                 repo: 'HEARTH', 
                 issue_number: context.payload.issue?.number || context.issue?.number
               });
               
               console.log('Issue data retrieved:', JSON.stringify(issueData.data, null, 2));
               
               const issue = issueData.data;
               const defaultLabels = ['pending-review'];
               
               console.log('Parsing issue body for hunt type...');
               const formMatch = issue.body?.match(/### Hunt Type ðŸ”¥\s*\n\n([^\n]+)/);
               
               if (formMatch) {
                 const huntType = formMatch[1];
                 console.log('Hunt type found:', huntType);
                 
                 if (huntType.includes('Flames')) {
                   defaultLabels.push('hypothesis-driven');
                   console.log('Added hypothesis-driven label');
                 }
                 if (huntType.includes('Embers')) {
                   defaultLabels.push('baseline');
                   console.log('Added baseline label');
                 }
                 if (huntType.includes('Alchemy')) {
                   defaultLabels.push('model-assisted'); 
                   console.log('Added model-assisted label');
                 }
               } else {
                 console.log('No hunt type match found in body:', issue.body);
               }
  
               console.log('Adding labels:', defaultLabels);
               await github.rest.issues.addLabels({
                 owner: 'THOR-Collective',
                 repo: 'HEARTH',
                 issue_number: issue.number,
                 labels: defaultLabels
               });
               
               console.log('Labels added successfully');
             } catch (error) {
               console.error('Error details:', error.message);
               console.error('Error stack:', error.stack);
               console.log('Context payload:', context.payload);
               console.log('Issue reference:', context.payload?.issue || context.issue);
             }
